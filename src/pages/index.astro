---
import { getImage } from '@astrojs/image';
import { MasonryGrid, sortedImage } from '../components/masonry';
import BaseIndex from '../layouts/BaseIndex.astro';
import fs from 'node:fs';
import ExifReader from 'exifreader';
import { parse } from 'fecha';

const images = await Astro.glob('../assets/images/original/*.jpg');
images.push(...(await Astro.glob('../assets/images/original/*.jpeg')));

const sortedImages: sortedImage[] = [];

function compareByDate(a: sortedImage, b: sortedImage) {
	return new Date(b.date) - new Date(a.date);
}

function insertSorted(array: any[], element: sortedImage) {
	for (
		var i = 0;
		i < array.length && compareByDate(array[i], element) < 0;
		i++
	) {}
	array.splice(i, 0, element);
}

await Promise.all(
	images.map(async (image) => {
		let { src: filepath } = image.default;
		filepath = filepath.replace('/@astroimage/', 'src/');

		// Hack to check if file exists, if not, probably running build
		if (!fs.existsSync(filepath)) {
			filepath = filepath.replace('src/', '');
			filepath = 'dist/' + filepath;
		}

		const exifTags = (await ExifReader.load(filepath)) as Record<string, any>;
		const date =
			'DateTimeOriginal' in exifTags
				? (parse(
						exifTags.DateTimeOriginal.description,
						'YYYY:MM:DD HH:mm:ss'
				  ) as Date)
				: fs.statSync(`images/original/${image}`).birthtime;

		insertSorted(sortedImages, {
			original: await getImage({ ...image.default }),
			thumbnail: await getImage({ ...image.default, quality: 30 }),
			date: date,
		});
	})
);
---

<BaseIndex
	title='Galerie dAyaan'
	description='Ayaan Zaidis personal image feed. Mild obsession with aircrafts and shiny things. Mostly shot on a mobile camera.'
	permalink='https://gallery.obviy.us/'>
	<MasonryGrid images={sortedImages} client:load />
</BaseIndex>
